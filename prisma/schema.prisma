datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
  provider        = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserProfile {
  id        String  @id @default(cuid())
  publicName String?
  myIdShare String  @unique() @default(cuid())
  role      String  @default("STUDENT")
  createdAt DateTime @default(now())
  level     String? @default("HIGH_SCHOOL")
  onboarded Boolean @default(false)
  userId    String  @unique
  user      User    @relation(fields: [userId], references: [id])
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  profile       UserProfile?
  accounts      Account[]
  sessions      Session[]
  courses       Course[]
  lessons       Lesson[]
  events        Event[]
  classrooms    Classroom[] @relation(name: "ProfessorInClassroom")
  enrolledClassrooms Classroom[] @relation(name: "StudentInClassroom")
}




model Course {
  id          String   @id @default(cuid())
  title       String
  description String
  lessons     Lesson[]
  author      User?    @relation(fields: [authorId], references: [id])
  authorId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  published   Boolean?
  category    String?
}

model Lesson {
  lessonId        String   @id @default(uuid())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  title         String        @db.VarChar(255)
  author       User?         @relation(fields: [authorId], references: [id])
  authorId     String?
  document      Json?
  url           String?       
  courseId      String?
  course        Course?      @relation(fields: [courseId], references: [id])
}

// gestion du calendrier

model Event {
  id          String     @id @default(uuid())
  authorId      String
  title       String
  description String?
  date        DateTime
  start       String
  end         String
  startTime   String
  endTime     String
  color       String
  categoryId String?
  author      User?      @relation(fields: [authorId], references: [id])
  category    Category? @relation(fields: [categoryId], references: [id])
}
model Category {
  id      String     @id @default(uuid())
  userId  String
  name    String
  events  Event[]
}

model file{
  key String @id
  name String
  userId String
  url String
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Classroom {
  idClassroom  String @id @default(cuid())
  title         String
  description  String
  professorId  String
  professor    User    @relation(fields: [professorId], references: [id], name: "ProfessorInClassroom")
  students     User[]  @relation(name: "StudentInClassroom")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
